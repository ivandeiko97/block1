{"version":3,"sources":["components/banner/images/car.png","components/banner/Lease.jsx","components/banner/SectionRightBanner.jsx","components/banner/Banner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Lease","headerText","price","priceText","signingText","className","SectionRightBanner","Banner","src","img","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,iC,wKCE5B,SAASC,EAAT,GAA6D,IAA7CC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,YAC3D,OACE,yBAAKC,UAAU,SACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,uBAAGI,UAAU,eAAb,KACI,gCAASH,GAAgBC,GAE7B,uBAAGE,UAAU,iBAAiBD,ICNrB,SAASE,IACtB,OACE,6BAASD,UAAU,yBACjB,yBAAKA,UAAU,eACb,wBAAIA,UAAU,kBAAd,WACA,yBAAKA,UAAU,8BACb,2CACA,wCAGJ,yBAAKA,UAAU,sBACb,kBAACL,EAAD,CACEC,WAAW,qBACXC,MAAM,MACNC,UAAU,gBACVC,YAAY,gDAEd,kBAACJ,EAAD,CACEC,WAAW,sBACXC,MAAM,MACNC,UAAU,aACVC,YAAY,2BAGhB,wBAAIC,UAAU,cACd,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,oBAAb,uGACA,uBAAGA,UAAU,oBAAb,gH,0BCzBO,SAASE,IACtB,OACE,6BAASF,UAAU,UACjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKG,IAAKC,IAAKC,IAAI,SAErB,kBAACJ,EAAD,S,MCDKK,MARf,WACE,OACE,8BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c74d62b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car.07756115.png\";","import React from 'react'\r\n\r\nexport default function Lease({headerText, price, priceText, signingText}) {\r\n  return (\r\n    <div className=\"lease\">\r\n      <h2 className=\"lease-header\">{headerText}</h2>\r\n      <p className=\"lease-price\">\r\n        $ <strong>{price}</strong>{priceText}\r\n      </p>\r\n      <p className=\"lease-signing\">{signingText}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Lease from './Lease';\r\n\r\nexport default function SectionRightBanner() {\r\n  return (\r\n    <section className=\"banner-section__right\">\r\n      <div className=\"description\">\r\n        <h1 className=\"description-h1\">2019 Q5</h1>\r\n        <div className=\"description-specifications\">\r\n          <p>2 QT Quattro</p>\r\n          <p>Premium</p>\r\n        </div>    \r\n      </div>\r\n      <div className=\"leases-information\">\r\n        <Lease \r\n          headerText=\"Everyone Qualifies\"\r\n          price=\"499\"\r\n          priceText=\" 39 Mo. Lease\"\r\n          signingText=\"$3,500 Due at Signing | $0 Security Deposit\"\r\n        />\r\n        <Lease \r\n          headerText=\"Current Audi Owners\"\r\n          price=\"479\"\r\n          priceText=\" Mo. Lease\"\r\n          signingText=\"$3,500 Due at Signing\"\r\n        />\r\n      </div>\r\n      <hr className=\"banner-hr\"/>\r\n      <div className=\"banner-offer\">\r\n        <p className=\"banner-offerText\">MSRP: $47,450. 10K mi/yr. lease excludes tax, title, and plate free. For qualified customers though</p>\r\n        <p className=\"banner-offerText\">Audi Financial Services. Vehicle image shown for illustrative purposes only. #WC2776. Offer ends 09/03/19.</p>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport SectionRightBanner from './SectionRightBanner';\r\nimport './style/Banner.css';\r\nimport img from './images/car.png';\r\n\r\nexport default function Banner() {\r\n  return (\r\n    <section className=\"block1\">\r\n      <div className=\"banner\">\r\n        <div className=\"banner-wrapper\">\r\n          <div className=\"banner-car\">\r\n            <img src={img} alt=\"car\"/>\r\n          </div>\r\n          <SectionRightBanner />\r\n        </div>\r\n      </div>      \r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\nimport Banner from './components/banner/Banner';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main>\n      <Banner />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}